// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package functions_don

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type FunctionsBillingRegistryInterfaceRequestBilling struct {
	SubscriptionId uint64
	Client         common.Address
	GasLimit       uint32
	GasPrice       *big.Int
}

var FunctionsDONMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyBillingRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyPublicKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyRequestData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySendersList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentReportData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRequestID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedToSetSenders\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReportInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuthorizedSendersActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"AuthorizedSendersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AuthorizedSendersDeactive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DONRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"DONResponse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"UserCallbackError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"UserCallbackRawError\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateAuthorizedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"}],\"name\":\"addAuthorizedSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorizedReceiverActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateAuthorizedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateCost\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizedSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"internalType\":\"structFunctionsBillingRegistryInterface.RequestBilling\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"getRequiredFee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAuthorizedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"}],\"name\":\"removeAuthorizedSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"donPublicKey\",\"type\":\"bytes\"}],\"name\":\"setDONPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"rawVs\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmitters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "",
}

var FunctionsDONABI = FunctionsDONMetaData.ABI

var FunctionsDONBin = FunctionsDONMetaData.Bin

func DeployFunctionsDON(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FunctionsDON, error) {
	parsed, err := FunctionsDONMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FunctionsDONBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FunctionsDON{FunctionsDONCaller: FunctionsDONCaller{contract: contract}, FunctionsDONTransactor: FunctionsDONTransactor{contract: contract}, FunctionsDONFilterer: FunctionsDONFilterer{contract: contract}}, nil
}

type FunctionsDON struct {
	address common.Address
	abi     abi.ABI
	FunctionsDONCaller
	FunctionsDONTransactor
	FunctionsDONFilterer
}

type FunctionsDONCaller struct {
	contract *bind.BoundContract
}

type FunctionsDONTransactor struct {
	contract *bind.BoundContract
}

type FunctionsDONFilterer struct {
	contract *bind.BoundContract
}

type FunctionsDONSession struct {
	Contract     *FunctionsDON
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type FunctionsDONCallerSession struct {
	Contract *FunctionsDONCaller
	CallOpts bind.CallOpts
}

type FunctionsDONTransactorSession struct {
	Contract     *FunctionsDONTransactor
	TransactOpts bind.TransactOpts
}

type FunctionsDONRaw struct {
	Contract *FunctionsDON
}

type FunctionsDONCallerRaw struct {
	Contract *FunctionsDONCaller
}

type FunctionsDONTransactorRaw struct {
	Contract *FunctionsDONTransactor
}

func NewFunctionsDON(address common.Address, backend bind.ContractBackend) (*FunctionsDON, error) {
	abi, err := abi.JSON(strings.NewReader(FunctionsDONABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindFunctionsDON(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FunctionsDON{address: address, abi: abi, FunctionsDONCaller: FunctionsDONCaller{contract: contract}, FunctionsDONTransactor: FunctionsDONTransactor{contract: contract}, FunctionsDONFilterer: FunctionsDONFilterer{contract: contract}}, nil
}

func NewFunctionsDONCaller(address common.Address, caller bind.ContractCaller) (*FunctionsDONCaller, error) {
	contract, err := bindFunctionsDON(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FunctionsDONCaller{contract: contract}, nil
}

func NewFunctionsDONTransactor(address common.Address, transactor bind.ContractTransactor) (*FunctionsDONTransactor, error) {
	contract, err := bindFunctionsDON(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FunctionsDONTransactor{contract: contract}, nil
}

func NewFunctionsDONFilterer(address common.Address, filterer bind.ContractFilterer) (*FunctionsDONFilterer, error) {
	contract, err := bindFunctionsDON(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FunctionsDONFilterer{contract: contract}, nil
}

func bindFunctionsDON(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FunctionsDONABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_FunctionsDON *FunctionsDONRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FunctionsDON.Contract.FunctionsDONCaller.contract.Call(opts, result, method, params...)
}

func (_FunctionsDON *FunctionsDONRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FunctionsDON.Contract.FunctionsDONTransactor.contract.Transfer(opts)
}

func (_FunctionsDON *FunctionsDONRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FunctionsDON.Contract.FunctionsDONTransactor.contract.Transact(opts, method, params...)
}

func (_FunctionsDON *FunctionsDONCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FunctionsDON.Contract.contract.Call(opts, result, method, params...)
}

func (_FunctionsDON *FunctionsDONTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FunctionsDON.Contract.contract.Transfer(opts)
}

func (_FunctionsDON *FunctionsDONTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FunctionsDON.Contract.contract.Transact(opts, method, params...)
}

func (_FunctionsDON *FunctionsDONCaller) AuthorizedReceiverActive(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "authorizedReceiverActive")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_FunctionsDON *FunctionsDONSession) AuthorizedReceiverActive() (bool, error) {
	return _FunctionsDON.Contract.AuthorizedReceiverActive(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCallerSession) AuthorizedReceiverActive() (bool, error) {
	return _FunctionsDON.Contract.AuthorizedReceiverActive(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCaller) EstimateCost(opts *bind.CallOpts, subscriptionId uint64, data []byte, gasLimit uint32, gasPrice *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "estimateCost", subscriptionId, data, gasLimit, gasPrice)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_FunctionsDON *FunctionsDONSession) EstimateCost(subscriptionId uint64, data []byte, gasLimit uint32, gasPrice *big.Int) (*big.Int, error) {
	return _FunctionsDON.Contract.EstimateCost(&_FunctionsDON.CallOpts, subscriptionId, data, gasLimit, gasPrice)
}

func (_FunctionsDON *FunctionsDONCallerSession) EstimateCost(subscriptionId uint64, data []byte, gasLimit uint32, gasPrice *big.Int) (*big.Int, error) {
	return _FunctionsDON.Contract.EstimateCost(&_FunctionsDON.CallOpts, subscriptionId, data, gasLimit, gasPrice)
}

func (_FunctionsDON *FunctionsDONCaller) GetAuthorizedSenders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "getAuthorizedSenders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_FunctionsDON *FunctionsDONSession) GetAuthorizedSenders() ([]common.Address, error) {
	return _FunctionsDON.Contract.GetAuthorizedSenders(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCallerSession) GetAuthorizedSenders() ([]common.Address, error) {
	return _FunctionsDON.Contract.GetAuthorizedSenders(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCaller) GetDONPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "getDONPublicKey")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

func (_FunctionsDON *FunctionsDONSession) GetDONPublicKey() ([]byte, error) {
	return _FunctionsDON.Contract.GetDONPublicKey(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCallerSession) GetDONPublicKey() ([]byte, error) {
	return _FunctionsDON.Contract.GetDONPublicKey(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCaller) GetRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "getRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_FunctionsDON *FunctionsDONSession) GetRegistry() (common.Address, error) {
	return _FunctionsDON.Contract.GetRegistry(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCallerSession) GetRegistry() (common.Address, error) {
	return _FunctionsDON.Contract.GetRegistry(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCaller) GetRequiredFee(opts *bind.CallOpts, arg0 []byte, arg1 FunctionsBillingRegistryInterfaceRequestBilling) (*big.Int, error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "getRequiredFee", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_FunctionsDON *FunctionsDONSession) GetRequiredFee(arg0 []byte, arg1 FunctionsBillingRegistryInterfaceRequestBilling) (*big.Int, error) {
	return _FunctionsDON.Contract.GetRequiredFee(&_FunctionsDON.CallOpts, arg0, arg1)
}

func (_FunctionsDON *FunctionsDONCallerSession) GetRequiredFee(arg0 []byte, arg1 FunctionsBillingRegistryInterfaceRequestBilling) (*big.Int, error) {
	return _FunctionsDON.Contract.GetRequiredFee(&_FunctionsDON.CallOpts, arg0, arg1)
}

func (_FunctionsDON *FunctionsDONCaller) IsAuthorizedSender(opts *bind.CallOpts, sender common.Address) (bool, error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "isAuthorizedSender", sender)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_FunctionsDON *FunctionsDONSession) IsAuthorizedSender(sender common.Address) (bool, error) {
	return _FunctionsDON.Contract.IsAuthorizedSender(&_FunctionsDON.CallOpts, sender)
}

func (_FunctionsDON *FunctionsDONCallerSession) IsAuthorizedSender(sender common.Address) (bool, error) {
	return _FunctionsDON.Contract.IsAuthorizedSender(&_FunctionsDON.CallOpts, sender)
}

func (_FunctionsDON *FunctionsDONCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_FunctionsDON *FunctionsDONSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _FunctionsDON.Contract.LatestConfigDetails(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _FunctionsDON.Contract.LatestConfigDetails(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_FunctionsDON *FunctionsDONSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _FunctionsDON.Contract.LatestConfigDigestAndEpoch(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _FunctionsDON.Contract.LatestConfigDigestAndEpoch(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_FunctionsDON *FunctionsDONSession) Owner() (common.Address, error) {
	return _FunctionsDON.Contract.Owner(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCallerSession) Owner() (common.Address, error) {
	return _FunctionsDON.Contract.Owner(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCaller) Transmitters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "transmitters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_FunctionsDON *FunctionsDONSession) Transmitters() ([]common.Address, error) {
	return _FunctionsDON.Contract.Transmitters(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCallerSession) Transmitters() ([]common.Address, error) {
	return _FunctionsDON.Contract.Transmitters(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FunctionsDON.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_FunctionsDON *FunctionsDONSession) TypeAndVersion() (string, error) {
	return _FunctionsDON.Contract.TypeAndVersion(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONCallerSession) TypeAndVersion() (string, error) {
	return _FunctionsDON.Contract.TypeAndVersion(&_FunctionsDON.CallOpts)
}

func (_FunctionsDON *FunctionsDONTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FunctionsDON.contract.Transact(opts, "acceptOwnership")
}

func (_FunctionsDON *FunctionsDONSession) AcceptOwnership() (*types.Transaction, error) {
	return _FunctionsDON.Contract.AcceptOwnership(&_FunctionsDON.TransactOpts)
}

func (_FunctionsDON *FunctionsDONTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _FunctionsDON.Contract.AcceptOwnership(&_FunctionsDON.TransactOpts)
}

func (_FunctionsDON *FunctionsDONTransactor) ActivateAuthorizedReceiver(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FunctionsDON.contract.Transact(opts, "activateAuthorizedReceiver")
}

func (_FunctionsDON *FunctionsDONSession) ActivateAuthorizedReceiver() (*types.Transaction, error) {
	return _FunctionsDON.Contract.ActivateAuthorizedReceiver(&_FunctionsDON.TransactOpts)
}

func (_FunctionsDON *FunctionsDONTransactorSession) ActivateAuthorizedReceiver() (*types.Transaction, error) {
	return _FunctionsDON.Contract.ActivateAuthorizedReceiver(&_FunctionsDON.TransactOpts)
}

func (_FunctionsDON *FunctionsDONTransactor) AddAuthorizedSenders(opts *bind.TransactOpts, senders []common.Address) (*types.Transaction, error) {
	return _FunctionsDON.contract.Transact(opts, "addAuthorizedSenders", senders)
}

func (_FunctionsDON *FunctionsDONSession) AddAuthorizedSenders(senders []common.Address) (*types.Transaction, error) {
	return _FunctionsDON.Contract.AddAuthorizedSenders(&_FunctionsDON.TransactOpts, senders)
}

func (_FunctionsDON *FunctionsDONTransactorSession) AddAuthorizedSenders(senders []common.Address) (*types.Transaction, error) {
	return _FunctionsDON.Contract.AddAuthorizedSenders(&_FunctionsDON.TransactOpts, senders)
}

func (_FunctionsDON *FunctionsDONTransactor) DeactivateAuthorizedReceiver(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FunctionsDON.contract.Transact(opts, "deactivateAuthorizedReceiver")
}

func (_FunctionsDON *FunctionsDONSession) DeactivateAuthorizedReceiver() (*types.Transaction, error) {
	return _FunctionsDON.Contract.DeactivateAuthorizedReceiver(&_FunctionsDON.TransactOpts)
}

func (_FunctionsDON *FunctionsDONTransactorSession) DeactivateAuthorizedReceiver() (*types.Transaction, error) {
	return _FunctionsDON.Contract.DeactivateAuthorizedReceiver(&_FunctionsDON.TransactOpts)
}

func (_FunctionsDON *FunctionsDONTransactor) RemoveAuthorizedSenders(opts *bind.TransactOpts, senders []common.Address) (*types.Transaction, error) {
	return _FunctionsDON.contract.Transact(opts, "removeAuthorizedSenders", senders)
}

func (_FunctionsDON *FunctionsDONSession) RemoveAuthorizedSenders(senders []common.Address) (*types.Transaction, error) {
	return _FunctionsDON.Contract.RemoveAuthorizedSenders(&_FunctionsDON.TransactOpts, senders)
}

func (_FunctionsDON *FunctionsDONTransactorSession) RemoveAuthorizedSenders(senders []common.Address) (*types.Transaction, error) {
	return _FunctionsDON.Contract.RemoveAuthorizedSenders(&_FunctionsDON.TransactOpts, senders)
}

func (_FunctionsDON *FunctionsDONTransactor) SendRequest(opts *bind.TransactOpts, subscriptionId uint64, data []byte, gasLimit uint32, gasPrice *big.Int) (*types.Transaction, error) {
	return _FunctionsDON.contract.Transact(opts, "sendRequest", subscriptionId, data, gasLimit, gasPrice)
}

func (_FunctionsDON *FunctionsDONSession) SendRequest(subscriptionId uint64, data []byte, gasLimit uint32, gasPrice *big.Int) (*types.Transaction, error) {
	return _FunctionsDON.Contract.SendRequest(&_FunctionsDON.TransactOpts, subscriptionId, data, gasLimit, gasPrice)
}

func (_FunctionsDON *FunctionsDONTransactorSession) SendRequest(subscriptionId uint64, data []byte, gasLimit uint32, gasPrice *big.Int) (*types.Transaction, error) {
	return _FunctionsDON.Contract.SendRequest(&_FunctionsDON.TransactOpts, subscriptionId, data, gasLimit, gasPrice)
}

func (_FunctionsDON *FunctionsDONTransactor) SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _FunctionsDON.contract.Transact(opts, "setConfig", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_FunctionsDON *FunctionsDONSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _FunctionsDON.Contract.SetConfig(&_FunctionsDON.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_FunctionsDON *FunctionsDONTransactorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _FunctionsDON.Contract.SetConfig(&_FunctionsDON.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_FunctionsDON *FunctionsDONTransactor) SetDONPublicKey(opts *bind.TransactOpts, donPublicKey []byte) (*types.Transaction, error) {
	return _FunctionsDON.contract.Transact(opts, "setDONPublicKey", donPublicKey)
}

func (_FunctionsDON *FunctionsDONSession) SetDONPublicKey(donPublicKey []byte) (*types.Transaction, error) {
	return _FunctionsDON.Contract.SetDONPublicKey(&_FunctionsDON.TransactOpts, donPublicKey)
}

func (_FunctionsDON *FunctionsDONTransactorSession) SetDONPublicKey(donPublicKey []byte) (*types.Transaction, error) {
	return _FunctionsDON.Contract.SetDONPublicKey(&_FunctionsDON.TransactOpts, donPublicKey)
}

func (_FunctionsDON *FunctionsDONTransactor) SetRegistry(opts *bind.TransactOpts, registryAddress common.Address) (*types.Transaction, error) {
	return _FunctionsDON.contract.Transact(opts, "setRegistry", registryAddress)
}

func (_FunctionsDON *FunctionsDONSession) SetRegistry(registryAddress common.Address) (*types.Transaction, error) {
	return _FunctionsDON.Contract.SetRegistry(&_FunctionsDON.TransactOpts, registryAddress)
}

func (_FunctionsDON *FunctionsDONTransactorSession) SetRegistry(registryAddress common.Address) (*types.Transaction, error) {
	return _FunctionsDON.Contract.SetRegistry(&_FunctionsDON.TransactOpts, registryAddress)
}

func (_FunctionsDON *FunctionsDONTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _FunctionsDON.contract.Transact(opts, "transferOwnership", to)
}

func (_FunctionsDON *FunctionsDONSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _FunctionsDON.Contract.TransferOwnership(&_FunctionsDON.TransactOpts, to)
}

func (_FunctionsDON *FunctionsDONTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _FunctionsDON.Contract.TransferOwnership(&_FunctionsDON.TransactOpts, to)
}

func (_FunctionsDON *FunctionsDONTransactor) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _FunctionsDON.contract.Transact(opts, "transmit", reportContext, report, rs, ss, rawVs)
}

func (_FunctionsDON *FunctionsDONSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _FunctionsDON.Contract.Transmit(&_FunctionsDON.TransactOpts, reportContext, report, rs, ss, rawVs)
}

func (_FunctionsDON *FunctionsDONTransactorSession) Transmit(reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	return _FunctionsDON.Contract.Transmit(&_FunctionsDON.TransactOpts, reportContext, report, rs, ss, rawVs)
}

type FunctionsDONAuthorizedSendersActiveIterator struct {
	Event *FunctionsDONAuthorizedSendersActive

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FunctionsDONAuthorizedSendersActiveIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionsDONAuthorizedSendersActive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FunctionsDONAuthorizedSendersActive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FunctionsDONAuthorizedSendersActiveIterator) Error() error {
	return it.fail
}

func (it *FunctionsDONAuthorizedSendersActiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FunctionsDONAuthorizedSendersActive struct {
	Account common.Address
	Raw     types.Log
}

func (_FunctionsDON *FunctionsDONFilterer) FilterAuthorizedSendersActive(opts *bind.FilterOpts) (*FunctionsDONAuthorizedSendersActiveIterator, error) {

	logs, sub, err := _FunctionsDON.contract.FilterLogs(opts, "AuthorizedSendersActive")
	if err != nil {
		return nil, err
	}
	return &FunctionsDONAuthorizedSendersActiveIterator{contract: _FunctionsDON.contract, event: "AuthorizedSendersActive", logs: logs, sub: sub}, nil
}

func (_FunctionsDON *FunctionsDONFilterer) WatchAuthorizedSendersActive(opts *bind.WatchOpts, sink chan<- *FunctionsDONAuthorizedSendersActive) (event.Subscription, error) {

	logs, sub, err := _FunctionsDON.contract.WatchLogs(opts, "AuthorizedSendersActive")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FunctionsDONAuthorizedSendersActive)
				if err := _FunctionsDON.contract.UnpackLog(event, "AuthorizedSendersActive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FunctionsDON *FunctionsDONFilterer) ParseAuthorizedSendersActive(log types.Log) (*FunctionsDONAuthorizedSendersActive, error) {
	event := new(FunctionsDONAuthorizedSendersActive)
	if err := _FunctionsDON.contract.UnpackLog(event, "AuthorizedSendersActive", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FunctionsDONAuthorizedSendersChangedIterator struct {
	Event *FunctionsDONAuthorizedSendersChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FunctionsDONAuthorizedSendersChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionsDONAuthorizedSendersChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FunctionsDONAuthorizedSendersChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FunctionsDONAuthorizedSendersChangedIterator) Error() error {
	return it.fail
}

func (it *FunctionsDONAuthorizedSendersChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FunctionsDONAuthorizedSendersChanged struct {
	Senders   []common.Address
	ChangedBy common.Address
	Raw       types.Log
}

func (_FunctionsDON *FunctionsDONFilterer) FilterAuthorizedSendersChanged(opts *bind.FilterOpts) (*FunctionsDONAuthorizedSendersChangedIterator, error) {

	logs, sub, err := _FunctionsDON.contract.FilterLogs(opts, "AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return &FunctionsDONAuthorizedSendersChangedIterator{contract: _FunctionsDON.contract, event: "AuthorizedSendersChanged", logs: logs, sub: sub}, nil
}

func (_FunctionsDON *FunctionsDONFilterer) WatchAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *FunctionsDONAuthorizedSendersChanged) (event.Subscription, error) {

	logs, sub, err := _FunctionsDON.contract.WatchLogs(opts, "AuthorizedSendersChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FunctionsDONAuthorizedSendersChanged)
				if err := _FunctionsDON.contract.UnpackLog(event, "AuthorizedSendersChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FunctionsDON *FunctionsDONFilterer) ParseAuthorizedSendersChanged(log types.Log) (*FunctionsDONAuthorizedSendersChanged, error) {
	event := new(FunctionsDONAuthorizedSendersChanged)
	if err := _FunctionsDON.contract.UnpackLog(event, "AuthorizedSendersChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FunctionsDONAuthorizedSendersDeactiveIterator struct {
	Event *FunctionsDONAuthorizedSendersDeactive

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FunctionsDONAuthorizedSendersDeactiveIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionsDONAuthorizedSendersDeactive)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FunctionsDONAuthorizedSendersDeactive)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FunctionsDONAuthorizedSendersDeactiveIterator) Error() error {
	return it.fail
}

func (it *FunctionsDONAuthorizedSendersDeactiveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FunctionsDONAuthorizedSendersDeactive struct {
	Account common.Address
	Raw     types.Log
}

func (_FunctionsDON *FunctionsDONFilterer) FilterAuthorizedSendersDeactive(opts *bind.FilterOpts) (*FunctionsDONAuthorizedSendersDeactiveIterator, error) {

	logs, sub, err := _FunctionsDON.contract.FilterLogs(opts, "AuthorizedSendersDeactive")
	if err != nil {
		return nil, err
	}
	return &FunctionsDONAuthorizedSendersDeactiveIterator{contract: _FunctionsDON.contract, event: "AuthorizedSendersDeactive", logs: logs, sub: sub}, nil
}

func (_FunctionsDON *FunctionsDONFilterer) WatchAuthorizedSendersDeactive(opts *bind.WatchOpts, sink chan<- *FunctionsDONAuthorizedSendersDeactive) (event.Subscription, error) {

	logs, sub, err := _FunctionsDON.contract.WatchLogs(opts, "AuthorizedSendersDeactive")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FunctionsDONAuthorizedSendersDeactive)
				if err := _FunctionsDON.contract.UnpackLog(event, "AuthorizedSendersDeactive", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FunctionsDON *FunctionsDONFilterer) ParseAuthorizedSendersDeactive(log types.Log) (*FunctionsDONAuthorizedSendersDeactive, error) {
	event := new(FunctionsDONAuthorizedSendersDeactive)
	if err := _FunctionsDON.contract.UnpackLog(event, "AuthorizedSendersDeactive", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FunctionsDONConfigSetIterator struct {
	Event *FunctionsDONConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FunctionsDONConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionsDONConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FunctionsDONConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FunctionsDONConfigSetIterator) Error() error {
	return it.fail
}

func (it *FunctionsDONConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FunctionsDONConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_FunctionsDON *FunctionsDONFilterer) FilterConfigSet(opts *bind.FilterOpts) (*FunctionsDONConfigSetIterator, error) {

	logs, sub, err := _FunctionsDON.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &FunctionsDONConfigSetIterator{contract: _FunctionsDON.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_FunctionsDON *FunctionsDONFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *FunctionsDONConfigSet) (event.Subscription, error) {

	logs, sub, err := _FunctionsDON.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FunctionsDONConfigSet)
				if err := _FunctionsDON.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FunctionsDON *FunctionsDONFilterer) ParseConfigSet(log types.Log) (*FunctionsDONConfigSet, error) {
	event := new(FunctionsDONConfigSet)
	if err := _FunctionsDON.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FunctionsDONDONRequestIterator struct {
	Event *FunctionsDONDONRequest

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FunctionsDONDONRequestIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionsDONDONRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FunctionsDONDONRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FunctionsDONDONRequestIterator) Error() error {
	return it.fail
}

func (it *FunctionsDONDONRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FunctionsDONDONRequest struct {
	RequestId      [32]byte
	SubscriptionId uint64
	Data           []byte
	Raw            types.Log
}

func (_FunctionsDON *FunctionsDONFilterer) FilterDONRequest(opts *bind.FilterOpts, requestId [][32]byte) (*FunctionsDONDONRequestIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _FunctionsDON.contract.FilterLogs(opts, "DONRequest", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &FunctionsDONDONRequestIterator{contract: _FunctionsDON.contract, event: "DONRequest", logs: logs, sub: sub}, nil
}

func (_FunctionsDON *FunctionsDONFilterer) WatchDONRequest(opts *bind.WatchOpts, sink chan<- *FunctionsDONDONRequest, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _FunctionsDON.contract.WatchLogs(opts, "DONRequest", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FunctionsDONDONRequest)
				if err := _FunctionsDON.contract.UnpackLog(event, "DONRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FunctionsDON *FunctionsDONFilterer) ParseDONRequest(log types.Log) (*FunctionsDONDONRequest, error) {
	event := new(FunctionsDONDONRequest)
	if err := _FunctionsDON.contract.UnpackLog(event, "DONRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FunctionsDONDONResponseIterator struct {
	Event *FunctionsDONDONResponse

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FunctionsDONDONResponseIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionsDONDONResponse)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FunctionsDONDONResponse)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FunctionsDONDONResponseIterator) Error() error {
	return it.fail
}

func (it *FunctionsDONDONResponseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FunctionsDONDONResponse struct {
	RequestId [32]byte
	Raw       types.Log
}

func (_FunctionsDON *FunctionsDONFilterer) FilterDONResponse(opts *bind.FilterOpts, requestId [][32]byte) (*FunctionsDONDONResponseIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _FunctionsDON.contract.FilterLogs(opts, "DONResponse", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &FunctionsDONDONResponseIterator{contract: _FunctionsDON.contract, event: "DONResponse", logs: logs, sub: sub}, nil
}

func (_FunctionsDON *FunctionsDONFilterer) WatchDONResponse(opts *bind.WatchOpts, sink chan<- *FunctionsDONDONResponse, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _FunctionsDON.contract.WatchLogs(opts, "DONResponse", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FunctionsDONDONResponse)
				if err := _FunctionsDON.contract.UnpackLog(event, "DONResponse", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FunctionsDON *FunctionsDONFilterer) ParseDONResponse(log types.Log) (*FunctionsDONDONResponse, error) {
	event := new(FunctionsDONDONResponse)
	if err := _FunctionsDON.contract.UnpackLog(event, "DONResponse", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FunctionsDONOwnershipTransferRequestedIterator struct {
	Event *FunctionsDONOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FunctionsDONOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionsDONOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FunctionsDONOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FunctionsDONOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *FunctionsDONOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FunctionsDONOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_FunctionsDON *FunctionsDONFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*FunctionsDONOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _FunctionsDON.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &FunctionsDONOwnershipTransferRequestedIterator{contract: _FunctionsDON.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_FunctionsDON *FunctionsDONFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *FunctionsDONOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _FunctionsDON.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FunctionsDONOwnershipTransferRequested)
				if err := _FunctionsDON.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FunctionsDON *FunctionsDONFilterer) ParseOwnershipTransferRequested(log types.Log) (*FunctionsDONOwnershipTransferRequested, error) {
	event := new(FunctionsDONOwnershipTransferRequested)
	if err := _FunctionsDON.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FunctionsDONOwnershipTransferredIterator struct {
	Event *FunctionsDONOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FunctionsDONOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionsDONOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FunctionsDONOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FunctionsDONOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *FunctionsDONOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FunctionsDONOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_FunctionsDON *FunctionsDONFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*FunctionsDONOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _FunctionsDON.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &FunctionsDONOwnershipTransferredIterator{contract: _FunctionsDON.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_FunctionsDON *FunctionsDONFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FunctionsDONOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _FunctionsDON.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FunctionsDONOwnershipTransferred)
				if err := _FunctionsDON.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FunctionsDON *FunctionsDONFilterer) ParseOwnershipTransferred(log types.Log) (*FunctionsDONOwnershipTransferred, error) {
	event := new(FunctionsDONOwnershipTransferred)
	if err := _FunctionsDON.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FunctionsDONTransmittedIterator struct {
	Event *FunctionsDONTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FunctionsDONTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionsDONTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FunctionsDONTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FunctionsDONTransmittedIterator) Error() error {
	return it.fail
}

func (it *FunctionsDONTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FunctionsDONTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_FunctionsDON *FunctionsDONFilterer) FilterTransmitted(opts *bind.FilterOpts) (*FunctionsDONTransmittedIterator, error) {

	logs, sub, err := _FunctionsDON.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &FunctionsDONTransmittedIterator{contract: _FunctionsDON.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_FunctionsDON *FunctionsDONFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *FunctionsDONTransmitted) (event.Subscription, error) {

	logs, sub, err := _FunctionsDON.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FunctionsDONTransmitted)
				if err := _FunctionsDON.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FunctionsDON *FunctionsDONFilterer) ParseTransmitted(log types.Log) (*FunctionsDONTransmitted, error) {
	event := new(FunctionsDONTransmitted)
	if err := _FunctionsDON.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FunctionsDONUserCallbackErrorIterator struct {
	Event *FunctionsDONUserCallbackError

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FunctionsDONUserCallbackErrorIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionsDONUserCallbackError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FunctionsDONUserCallbackError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FunctionsDONUserCallbackErrorIterator) Error() error {
	return it.fail
}

func (it *FunctionsDONUserCallbackErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FunctionsDONUserCallbackError struct {
	RequestId [32]byte
	Reason    string
	Raw       types.Log
}

func (_FunctionsDON *FunctionsDONFilterer) FilterUserCallbackError(opts *bind.FilterOpts, requestId [][32]byte) (*FunctionsDONUserCallbackErrorIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _FunctionsDON.contract.FilterLogs(opts, "UserCallbackError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &FunctionsDONUserCallbackErrorIterator{contract: _FunctionsDON.contract, event: "UserCallbackError", logs: logs, sub: sub}, nil
}

func (_FunctionsDON *FunctionsDONFilterer) WatchUserCallbackError(opts *bind.WatchOpts, sink chan<- *FunctionsDONUserCallbackError, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _FunctionsDON.contract.WatchLogs(opts, "UserCallbackError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FunctionsDONUserCallbackError)
				if err := _FunctionsDON.contract.UnpackLog(event, "UserCallbackError", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FunctionsDON *FunctionsDONFilterer) ParseUserCallbackError(log types.Log) (*FunctionsDONUserCallbackError, error) {
	event := new(FunctionsDONUserCallbackError)
	if err := _FunctionsDON.contract.UnpackLog(event, "UserCallbackError", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type FunctionsDONUserCallbackRawErrorIterator struct {
	Event *FunctionsDONUserCallbackRawError

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *FunctionsDONUserCallbackRawErrorIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FunctionsDONUserCallbackRawError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(FunctionsDONUserCallbackRawError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *FunctionsDONUserCallbackRawErrorIterator) Error() error {
	return it.fail
}

func (it *FunctionsDONUserCallbackRawErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type FunctionsDONUserCallbackRawError struct {
	RequestId    [32]byte
	LowLevelData []byte
	Raw          types.Log
}

func (_FunctionsDON *FunctionsDONFilterer) FilterUserCallbackRawError(opts *bind.FilterOpts, requestId [][32]byte) (*FunctionsDONUserCallbackRawErrorIterator, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _FunctionsDON.contract.FilterLogs(opts, "UserCallbackRawError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return &FunctionsDONUserCallbackRawErrorIterator{contract: _FunctionsDON.contract, event: "UserCallbackRawError", logs: logs, sub: sub}, nil
}

func (_FunctionsDON *FunctionsDONFilterer) WatchUserCallbackRawError(opts *bind.WatchOpts, sink chan<- *FunctionsDONUserCallbackRawError, requestId [][32]byte) (event.Subscription, error) {

	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _FunctionsDON.contract.WatchLogs(opts, "UserCallbackRawError", requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(FunctionsDONUserCallbackRawError)
				if err := _FunctionsDON.contract.UnpackLog(event, "UserCallbackRawError", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_FunctionsDON *FunctionsDONFilterer) ParseUserCallbackRawError(log types.Log) (*FunctionsDONUserCallbackRawError, error) {
	event := new(FunctionsDONUserCallbackRawError)
	if err := _FunctionsDON.contract.UnpackLog(event, "UserCallbackRawError", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_FunctionsDON *FunctionsDON) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _FunctionsDON.abi.Events["AuthorizedSendersActive"].ID:
		return _FunctionsDON.ParseAuthorizedSendersActive(log)
	case _FunctionsDON.abi.Events["AuthorizedSendersChanged"].ID:
		return _FunctionsDON.ParseAuthorizedSendersChanged(log)
	case _FunctionsDON.abi.Events["AuthorizedSendersDeactive"].ID:
		return _FunctionsDON.ParseAuthorizedSendersDeactive(log)
	case _FunctionsDON.abi.Events["ConfigSet"].ID:
		return _FunctionsDON.ParseConfigSet(log)
	case _FunctionsDON.abi.Events["DONRequest"].ID:
		return _FunctionsDON.ParseDONRequest(log)
	case _FunctionsDON.abi.Events["DONResponse"].ID:
		return _FunctionsDON.ParseDONResponse(log)
	case _FunctionsDON.abi.Events["OwnershipTransferRequested"].ID:
		return _FunctionsDON.ParseOwnershipTransferRequested(log)
	case _FunctionsDON.abi.Events["OwnershipTransferred"].ID:
		return _FunctionsDON.ParseOwnershipTransferred(log)
	case _FunctionsDON.abi.Events["Transmitted"].ID:
		return _FunctionsDON.ParseTransmitted(log)
	case _FunctionsDON.abi.Events["UserCallbackError"].ID:
		return _FunctionsDON.ParseUserCallbackError(log)
	case _FunctionsDON.abi.Events["UserCallbackRawError"].ID:
		return _FunctionsDON.ParseUserCallbackRawError(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (FunctionsDONAuthorizedSendersActive) Topic() common.Hash {
	return common.HexToHash("0xae51766a982895b0c444fc99fc1a560762b464d709e6c78376c85617f7eeb5ce")
}

func (FunctionsDONAuthorizedSendersChanged) Topic() common.Hash {
	return common.HexToHash("0xf263cfb3e4298332e776194610cf9fdc09ccb3ada8b9aa39764d882e11fbf0a0")
}

func (FunctionsDONAuthorizedSendersDeactive) Topic() common.Hash {
	return common.HexToHash("0xea3828816a323b8d7ff49d755efd105e7719166d6c76fad97a28eee5eccc3d9a")
}

func (FunctionsDONConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (FunctionsDONDONRequest) Topic() common.Hash {
	return common.HexToHash("0x68a65bdc7ff032b17fae0569071103755fff6ccc89b1a294a8fa258e1d6f656c")
}

func (FunctionsDONDONResponse) Topic() common.Hash {
	return common.HexToHash("0x6dbfdc489ec0dacc65076421822e2828c76ccf705434a07b1db01c334404ed0c")
}

func (FunctionsDONOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (FunctionsDONOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (FunctionsDONTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (FunctionsDONUserCallbackError) Topic() common.Hash {
	return common.HexToHash("0xb2931868c372fe17a25643458add467d60ec5c51125a99b7309f41f5bcd2da6c")
}

func (FunctionsDONUserCallbackRawError) Topic() common.Hash {
	return common.HexToHash("0xe0b838ffe6ee22a0d3acf19a85db6a41b34a1ab739e2d6c759a2e42d95bdccb2")
}

func (_FunctionsDON *FunctionsDON) Address() common.Address {
	return _FunctionsDON.address
}

type FunctionsDONInterface interface {
	AuthorizedReceiverActive(opts *bind.CallOpts) (bool, error)

	EstimateCost(opts *bind.CallOpts, subscriptionId uint64, data []byte, gasLimit uint32, gasPrice *big.Int) (*big.Int, error)

	GetAuthorizedSenders(opts *bind.CallOpts) ([]common.Address, error)

	GetDONPublicKey(opts *bind.CallOpts) ([]byte, error)

	GetRegistry(opts *bind.CallOpts) (common.Address, error)

	GetRequiredFee(opts *bind.CallOpts, arg0 []byte, arg1 FunctionsBillingRegistryInterfaceRequestBilling) (*big.Int, error)

	IsAuthorizedSender(opts *bind.CallOpts, sender common.Address) (bool, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	Transmitters(opts *bind.CallOpts) ([]common.Address, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	ActivateAuthorizedReceiver(opts *bind.TransactOpts) (*types.Transaction, error)

	AddAuthorizedSenders(opts *bind.TransactOpts, senders []common.Address) (*types.Transaction, error)

	DeactivateAuthorizedReceiver(opts *bind.TransactOpts) (*types.Transaction, error)

	RemoveAuthorizedSenders(opts *bind.TransactOpts, senders []common.Address) (*types.Transaction, error)

	SendRequest(opts *bind.TransactOpts, subscriptionId uint64, data []byte, gasLimit uint32, gasPrice *big.Int) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	SetDONPublicKey(opts *bind.TransactOpts, donPublicKey []byte) (*types.Transaction, error)

	SetRegistry(opts *bind.TransactOpts, registryAddress common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error)

	FilterAuthorizedSendersActive(opts *bind.FilterOpts) (*FunctionsDONAuthorizedSendersActiveIterator, error)

	WatchAuthorizedSendersActive(opts *bind.WatchOpts, sink chan<- *FunctionsDONAuthorizedSendersActive) (event.Subscription, error)

	ParseAuthorizedSendersActive(log types.Log) (*FunctionsDONAuthorizedSendersActive, error)

	FilterAuthorizedSendersChanged(opts *bind.FilterOpts) (*FunctionsDONAuthorizedSendersChangedIterator, error)

	WatchAuthorizedSendersChanged(opts *bind.WatchOpts, sink chan<- *FunctionsDONAuthorizedSendersChanged) (event.Subscription, error)

	ParseAuthorizedSendersChanged(log types.Log) (*FunctionsDONAuthorizedSendersChanged, error)

	FilterAuthorizedSendersDeactive(opts *bind.FilterOpts) (*FunctionsDONAuthorizedSendersDeactiveIterator, error)

	WatchAuthorizedSendersDeactive(opts *bind.WatchOpts, sink chan<- *FunctionsDONAuthorizedSendersDeactive) (event.Subscription, error)

	ParseAuthorizedSendersDeactive(log types.Log) (*FunctionsDONAuthorizedSendersDeactive, error)

	FilterConfigSet(opts *bind.FilterOpts) (*FunctionsDONConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *FunctionsDONConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*FunctionsDONConfigSet, error)

	FilterDONRequest(opts *bind.FilterOpts, requestId [][32]byte) (*FunctionsDONDONRequestIterator, error)

	WatchDONRequest(opts *bind.WatchOpts, sink chan<- *FunctionsDONDONRequest, requestId [][32]byte) (event.Subscription, error)

	ParseDONRequest(log types.Log) (*FunctionsDONDONRequest, error)

	FilterDONResponse(opts *bind.FilterOpts, requestId [][32]byte) (*FunctionsDONDONResponseIterator, error)

	WatchDONResponse(opts *bind.WatchOpts, sink chan<- *FunctionsDONDONResponse, requestId [][32]byte) (event.Subscription, error)

	ParseDONResponse(log types.Log) (*FunctionsDONDONResponse, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*FunctionsDONOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *FunctionsDONOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*FunctionsDONOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*FunctionsDONOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FunctionsDONOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*FunctionsDONOwnershipTransferred, error)

	FilterTransmitted(opts *bind.FilterOpts) (*FunctionsDONTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *FunctionsDONTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*FunctionsDONTransmitted, error)

	FilterUserCallbackError(opts *bind.FilterOpts, requestId [][32]byte) (*FunctionsDONUserCallbackErrorIterator, error)

	WatchUserCallbackError(opts *bind.WatchOpts, sink chan<- *FunctionsDONUserCallbackError, requestId [][32]byte) (event.Subscription, error)

	ParseUserCallbackError(log types.Log) (*FunctionsDONUserCallbackError, error)

	FilterUserCallbackRawError(opts *bind.FilterOpts, requestId [][32]byte) (*FunctionsDONUserCallbackRawErrorIterator, error)

	WatchUserCallbackRawError(opts *bind.WatchOpts, sink chan<- *FunctionsDONUserCallbackRawError, requestId [][32]byte) (event.Subscription, error)

	ParseUserCallbackRawError(log types.Log) (*FunctionsDONUserCallbackRawError, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
